# In course of CTBTO preparation study, steps for installation of Jenkins:

1. Root installations:
  wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  rpm -ivh epel-release-latest-7.noarch.rpm
  yum repolist
  yum check-update
  yum update
  yum info mailx

  wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  yum install jenkins
  vim /etc/sysconfig/jenkins
  systemctl start jenkins.service

  # Interesting files of Jenkins
  /var/lib/jenkins/secrets/initialAdminPassword
  /var/lib/jenkins/jobs/My_first_job/config.xml
  /var/lib/jenkins/workspace/

  # Network configuration on VM
  /etc/hosts - purpose of this file is to resolve hostnames that cannot be resolved any other way
  /etc/resolv.conf - This file specifies the IP addresses of DNS servers and the search domain.
  /etc/sysconfig/network - Specifies routing and host information for all network interfaces
  /etc/sysconfig/network-scripts/ -  For each network interface, there is a corresponding interface configuration script.
  > 

  # Network command Windows CMD
  telnet 192.168.160.104 22 (IP address)
  
  
  # Accessible from outside
  This was hard - describe latter - I have lost/spent so much time,
  whole this dready day on this.  Finally it was in proxi,
  forwarding. And I still do not know whether it is done correctly.
  We may try then to make the communication via SSH, but I would
  prefer to focus on different study fields.  May be just to take off
  a short while again.  But on monday we shall document this all
  troubles here including the set up steps.

  Outdate of Oracle Virutal Box has caused mallfunction of the VM after reboot.
  I had to:
  - upgrade Oracle Virtual Box
  - upgrade CentOS 7 inside the machine
  - install extensions
  - add memory to the graphical card (otherwise the Gnome GUI got stuck)
  - changed the network adapter to Bridged only
  
  Then:
  - reverted locally created httpd config file
  mv /etc/httpd/conf.d/localhost.localdomain.conf /home/kianicka/ -v
  Started httpd - appache tomcat web server
  systemctl start httpd.service
  In this case the wellcome web page was already available on port 80:
  http://192.168.161.39:80
  even from outside the machine.

  Then I have prepared the following reverse proxy for localhost
  and http port:
  /etc/httpd/conf.d/localhost.localdomain.conf
  ---
  <VirtualHost *:80>
    ServerName localhost.localdomain
    ServerAdmin jan.kianicka@microstep-mis.com
    ProxyPreserveHost On
    ProxyPass / http://localhost:8080/ nocanon
    ProxyPassReverse / http://localhost:8080/
    ProxyPassReverse / http://localhost.localdomain/
    ProxyRequests Off
    AllowEncodedSlashes NoDecode
    SSLEngine Off 
  </VirtualHost>
  ---
  This is forwarding http packets from port 80 to port 8080.
  In this case we have Jenkins main page available on localhost:
  http://localhost
  and from outside
  http://<IP>:80

  Preparation of local nod for maven and java project:
  yum install java-1.8.0-openjdk-devel.x86_64
  ls -l /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64

  Maven installed with devault configuration here:
  /opt/apache-maven-3.5.3
  
  SSL certificate for development purpose
  ---------------------------------------
  > openssl genrsa -des3 -out rootCA.key 2048
  passphrase:MyJenkinsKey
  > openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem
  ---
  Country Name (2 letter code) [XX]:SR
  State or Province Name (full name) []:Bratislava
  Locality Name (eg, city) [Default City]:Bratislava
  Organization Name (eg, company) [Default Company Ltd]:Home
  Organizational Unit Name (eg, section) []:HomeComputingMachine
  Common Name (eg, your name or your server's hostname) []:ComputingMachine
  Email Address []:jan.kianicka@gmail.com
  ---
  > cp /home/kianicka/ssl_certificate/rootCA.pem /etc/pki/ca-trust/source/anchors/

  Generating crt and key certificate files.
  > cd /home/kianicka/ssl_certificates
  > vim server.csr.cnf
  ---
  [req]
  default_bits = 2048
  prompt = no
  default_md = sha256
  distinguished_name = dn

  [dn]
  C=SR
  ST=Bratislava
  L=Bratislava
  O=Home
  OU=HomeComputingMachine
  emailAddress=jan.kianicka@gmail.com
  CN = ComputingMachine
  ---
  > vim v3.ext
  ---
  authorityKeyIdentifier=keyid,issuer
  basicConstraints=CA:FALSE
  keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
  subjectAltName = @alt_names

  [alt_names]
  DNS.1 = localhost
  ---
  > openssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key -config <( cat server.csr.cnf )
  > openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 500 -sha256 -extfile v3.ext
  We need yet server certifacte in PKCS#12 format, this can be created by this command:
  > openssl pkcs12 -export -in server.crt -inkey server.key -out server.p12
  Export Password:MyJenkinsKey
  
  and we have the certificate files ready. Good article is this one:
  https://medium.freecodecamp.org/how-to-get-https-working-on-your-local-development-environment-in-5-minutes-7af615770eec

  Deployment of the certificates to the localhost system - root CA certificate for secure authentification.
  > mkdir /etc/httpd/ssl/
  > cp /home/kianicka/ssl_certificate/server.key /etc/httpd/ssl
  > cp /home/kianicka/ssl_certificate/server.crt /etc/httpd/ssl
  > setsebool -P httpd_can_network_connect on
  check this particular boolean of SELinux module
  > getsebool -a |grep httpd_can_network_connect
    httpd_can_network_connect --> on
  Firewall setup
  > firewall-cmd --permanent --add-service http
  > firewall-cmd --permanent --add-service https
  > systemctl restart firewalld

  Just side Oraclve VM issue - too slow after import, too litle video memory.
  Modfied by this command in Windows cmd:
  > cd "C:\Program Files\Oracle\Virtualbox"
  > vboxmanage modifyvm Dev_CentOS --vram 256
  
  Configure new httpd service configuration file
  ---
  <VirtualHost *:80>
   RewriteEngine On
   RewriteRule ^.*$ https://%{SERVER_NAME}:443%{REQUEST_URI}
  </VirtualHost>
 
  <VirtualHost *:443>
   ServerName localhost.localdomain 
   ServerAdmin jan.kianicka@microstep-mis.com
   ProxyPreserveHost On
   ProxyPass / http://localhost:8080/ nocanon
   ProxyPassReverse / http://localhost:8080/
   ProxyPassReverse / https://localhost.localdomain/
   ProxyRequests Off
   AllowEncodedSlashes NoDecode
   SSLEngine On
   SSLCertificateFile /etc/httpd/ssl/server.crt
   SSLCertificateKeyFile /etc/httpd/ssl/server.key
   TransferLog /var/log/httpd/jenkins.access.log
   ErrorLog /var/log/httpd/jenkins.error.log
   RequestHeader set X-Forwarded-Proto "https"
   RequestHeader set X-Forwarded-Port "443"
  </VirtualHost>
  ---
  After restart of httpd and importing of custom certificate to firefox,
  we are running SSL secured jenkins.
  
  TODO - next steps in background of Jenkins configuration shall be:
  - attach second node with test for C-check module.
  
1.1 Import of the exported OVA file of the machine with my Jenkins.
  Importing of OVA to Hyper V:
  http://blog.worldofjani.com/?p=991
  - installing Oracle VirtualBox
  - conversion:
   D:\VMs>"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" clonemedium --format vhd Dev_CentOS-disk002.vmdk Dev_CentOS-disk002.vhd
   0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%
   Clone medium created in format 'vhd'. UUID: 6d7d4a02-7107-447b-a427-ab139b8bcadb
   
  http://reflect.macrium.com/help/v5/how_to/imgtovhd/using_a_vhd_with_microsoft_hyper-v_or_virtual_pc.htm
  http://www.fixedbyvonnie.com/2014/11/virtualbox-showing-32-bit-guest-versions-64-bit-host-os

  https://smudj.wordpress.com/2015/05/14/windows-10-hyper-v-setting-up-networking-shared-and-bridged-options/
  
  Unfortunatelly, the machine worked correctly only in rescue mode.
  After cloning the partition there were missing /dev/centos partitions.
  The reparations would be intensive and tricky - decribed e.g. here:
  https://www.centos.org/forums/viewtopic.php?t=52140

  We are switiching to Oracle VirtualBox and had to disable Hyper V.
  They can not both run with full features on the same hosting windows OS.

1.2 Attaching second node - prepared as CATS slave together with IDC baseline.
  We will attach the node and prepare all keys and certificates.
  Root commands (there are still troubles with VBox additons and kernel headers version)
  > yum install git
  > yum install autoreconf
  > yum install autoconf
  > yum install automake
  > yum install libtool
  > yum install check
  > yum install check-devel
  then local clone of cbase, idcmodel, and cats using my Mstep key.
  Successfull built.
  Using bridged network adapter we can see Jenkins and slave machine
  and connect via ssh.

  # we come to setting up the agent node -  worker
  There must be set up technical system user 'jenkins' both machines.
  And established public RSA key ssh communication.
  However, I did not succeed to establish this communication on my Virtual Box machines.
  - public keys were added to .ssh/authorized_keys
  - public key authentification was enabled in sshd server on both machines:
  > vim /etc/ssh/sshd_config
  ---
  RSAAuthentication yes
  PubkeyAuthentication yes
  AuthorizedKeysFile      .ssh/authorized_keys
  ---
  > systemctl restart sshd
  However, I did not succeed with establishing this connection without
  password.
  Finally, in slave machine we created 'jenkins' user with
  login/password authentification.  Such user could be configured in
  Jenkins server and we have running Jenkins node.

  On master Jenkins server it is not possible to log in as 'jenkins' user -
  this system user has this option for security reasons disabled.
  In order to work under jenkins execute this command:
  > su -s /bin/bash jenkins

  Followed this good article:
  https://linuxacademy.com/blog/devops/adding-a-jenkins-agent-node/

  Created OVA files of turned off machines, we terminate the work on this for this week.
  
  
2. Jenkins it self configurations
  My Github credential were provided.
  Clone was successfull.
  First admin account initialized:
   ---
   # First admin role
   login: JenkinsAdmin
   pass: MyFirstConfig1
   email: jan.kianicka@microstep-mis.com
   ---
  Next step - made jenkins to be accessible from outside world.
  Done.
  
  Internal URL: http://localhost:8080/login?from=%2F
  
  Next step will be crating Java Maven job with sample unit tests
  There is sample project: git@github.com:JanKianicka/java_study.git
  java_study/maven_test/

  Preparation of Jenkins for maven projects.
  1. Installed Maven Integration plugin
  2. In Global Tool Configuration configured Maven
     Default settings provider: /opt/apache-maven-3.5.3/conf/settings.xml
     Default global settings provider: /opt/apache-maven-3.5.3/conf/settings.xml
  3. In Global Tool Configuration configured JDK installation
     Name: JDK1.8
     JAVA_HOME: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/
  4. Created new Maven project - My_first_jenkins_job
     as GitHub project
     Root POM: maven_test/pom.xml
     Goals and options: clean install
     others were default.
  After this it was possible to use local nod for compilation and
  running unit tests for my first maven project.

  New Hyper V instance - http://192.168.0.25/job/My_first_jenkins_job/
  New Oracle VM Jenkins server with SSL: https://192.168.0.25/
  - certificate generated for localhost was imported as custom certificate
  Thus there is warning in firefox for imported server.p12.
  However, it is for development purpose only.

  CTBTOSA group does not allow HTTP cloning.
  Therefore I have created my login/key ssh Jenkins user and used that one for
  authentification for particular 'cbase' free project.
  (My mstep private key was added to Jenkins - user JanKianicka).

  cbase_1 - free stype project configured and installed XUnit plugin,
  tested archivation of artifacts and try yet this C-check results
  colleciton into a single test result.
  Successfully called as post-build action for cbase_1 project.
  Currently configured jobs backed up on the master:
  > tar -cvf jenkins_jobs/backup_28.3.2019/jobs.tar /var/lib/jenkins/jobs/
  
  
  TODO: 
  Then creating of the remote java worker.
  Then creating of the C worker with integrated C project using C-check.





